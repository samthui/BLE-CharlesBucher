//
//  DeviceViewController.m
//  BLE_Master
//
//  Created by samthui7 on 4/26/13.
//  Copyright (c) 2013 samthui7. All rights reserved.
//

#import "DeviceViewController.h"

#import "BLEDiscoveryHelper.h"

#import "Constants.h"

@interface DeviceViewController ()

@property (nonatomic, assign) int ownerIndex;

@end

@implementation DeviceViewController

@synthesize c1_bit0_switch;
@synthesize c1_bit1_switch;
@synthesize c1_bit2_switch;
@synthesize c1_bit3_switch;

@synthesize c2_bit0_switch;
@synthesize c2_bit1_switch;
@synthesize c2_bit2_switch;
@synthesize c2_bit3_switch;

@synthesize adc1_slider;
@synthesize adc2_slider;
@synthesize adc1_label;
@synthesize adc2_label;

@synthesize rssi_label;
@synthesize distance_label;

@synthesize interval_3s_btn;
@synthesize interval_4s_btn;
@synthesize interval_5s_btn;

@synthesize ownerIndex = _ownerIndex;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil ownerIndex:(int)ownerIndex
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        _ownerIndex = ownerIndex;
        
        BLEDiscoveryHelper* centralBLEHelper = [BLEDiscoveryHelper sharedInstance];
        Device* device = (Device*)[centralBLEHelper.discoveredDeviceList objectAtIndex:_ownerIndex];
        device.updateInfoDelegate = self;
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    
    
    BLEDiscoveryHelper* centralBLEHelper = [BLEDiscoveryHelper sharedInstance];
    Device* device = (Device*)[centralBLEHelper.discoveredDeviceList objectAtIndex:_ownerIndex];
    switch (device.interval) {
//        case 0.5:
//            [self.interval_3s_btn setSelected:YES];
//            [self.interval_3s_btn setBackgroundColor:[UIColor greenColor]];
//            
//            [self.interval_4s_btn setSelected:NO];
//            [self.interval_4s_btn setBackgroundColor:[UIColor whiteColor]];
//            
//            [self.interval_5s_btn setSelected:NO];
//            [self.interval_5s_btn setBackgroundColor:[UIColor whiteColor]];
//            break;
            
        case 1:
            [self.interval_4s_btn setSelected:YES];
            [self.interval_4s_btn setBackgroundColor:[UIColor greenColor]];
            
            [self.interval_3s_btn setSelected:NO];
            [self.interval_3s_btn setBackgroundColor:[UIColor whiteColor]];
            
            [self.interval_5s_btn setSelected:NO];
            [self.interval_5s_btn setBackgroundColor:[UIColor whiteColor]];
            break;
            
        case 2:
            [self.interval_5s_btn setSelected:YES];
            [self.interval_5s_btn setBackgroundColor:[UIColor greenColor]];
            
            [self.interval_4s_btn setSelected:NO];
            [self.interval_4s_btn setBackgroundColor:[UIColor whiteColor]];
            
            [self.interval_3s_btn setSelected:NO];
            [self.interval_3s_btn setBackgroundColor:[UIColor whiteColor]];
            break;
            
        default:
            [self.interval_3s_btn setSelected:YES];
            [self.interval_3s_btn setBackgroundColor:[UIColor greenColor]];
            
            [self.interval_4s_btn setSelected:NO];
            [self.interval_4s_btn setBackgroundColor:[UIColor whiteColor]];
            
            [self.interval_5s_btn setSelected:NO];
            [self.interval_5s_btn setBackgroundColor:[UIColor whiteColor]];
            break;
    }
    
    //control view
    unsigned char byteData[1];
    [device.data getBytes:&byteData length:1];
    
    //
    int byte0 = byteData[0];
    if (byte0 & 0x01)
    {
        [self.c1_bit0_switch setOn:YES];
    }
    else{
        [self.c1_bit0_switch setOn:NO];
    }
    if (byte0 & 0x02)
    {
        [self.c1_bit1_switch setOn:YES];
    }
    else{
        [self.c1_bit1_switch setOn:NO];
    }
    if (byte0 & 0x04)
    {
        [self.c1_bit2_switch setOn:YES];
    }
    else{
        [self.c1_bit2_switch setOn:NO];
    }
    if (byte0 & 0x08)
    {
        [self.c1_bit3_switch setOn:YES];
    }
    else{
        [self.c1_bit3_switch setOn:NO];
    }
}

-(void)dealloc
{
    BLEDiscoveryHelper* centralBLEHelper = [BLEDiscoveryHelper sharedInstance];
    Device* device = (Device*)[centralBLEHelper.discoveredDeviceList objectAtIndex:_ownerIndex];
    device.updateInfoDelegate = nil;
    
    [super dealloc];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - IBActions
-(IBAction)selectInterval:(id)sender
{
    UIButton* theBtn = (UIButton*)sender;
    
    switch (theBtn.tag) {
        case 3:
            [self.interval_3s_btn setSelected:YES];
            [self.interval_3s_btn setBackgroundColor:[UIColor greenColor]];
            
            [self.interval_4s_btn setSelected:NO];
            [self.interval_4s_btn setBackgroundColor:[UIColor whiteColor]];
            
            [self.interval_5s_btn setSelected:NO];
            [self.interval_5s_btn setBackgroundColor:[UIColor whiteColor]];
            break;
            
        case 4:
            [self.interval_4s_btn setSelected:YES];
            [self.interval_4s_btn setBackgroundColor:[UIColor greenColor]];
            
            [self.interval_3s_btn setSelected:NO];
            [self.interval_3s_btn setBackgroundColor:[UIColor whiteColor]];
            
            [self.interval_5s_btn setSelected:NO];
            [self.interval_5s_btn setBackgroundColor:[UIColor whiteColor]];
            break;
            
        case 5:
            [self.interval_5s_btn setSelected:YES];
            [self.interval_5s_btn setBackgroundColor:[UIColor greenColor]];
            
            [self.interval_4s_btn setSelected:NO];
            [self.interval_4s_btn setBackgroundColor:[UIColor whiteColor]];
            
            [self.interval_3s_btn setSelected:NO];
            [self.interval_3s_btn setBackgroundColor:[UIColor whiteColor]];
            break;
            
        default:
            break;
    }
    
    [self done:nil];
}

-(void)done:(id)sender
{
    //data to write
    //bit 0
    NSInteger bit0 = self.c1_bit0_switch.isOn;
    //bit 1
    NSInteger bit1 = self.c1_bit1_switch.isOn;
    //bit 2
    NSInteger bit2 = self.c1_bit2_switch.isOn;
    //bit 3
    NSInteger bit3 = self.c1_bit3_switch.isOn;
    //
    NSInteger dataToSend = bit0*pow(2, 0) + bit1*pow(2, 1) + bit2*pow(2, 2) + bit3*pow(2, 3);
    NSLog(@"write %i", dataToSend);
    NSMutableData* data = [NSMutableData dataWithBytes:&dataToSend length:1];
    
    //interval, default 0.5s selected
    int interval = 0.5;
    if ([self.interval_4s_btn isSelected]) {
        interval = 1;
    }
    else if ([self.interval_5s_btn isSelected]){
        interval = 2;
    }
    
    BLEDiscoveryHelper* centralBLEHelper = [BLEDiscoveryHelper sharedInstance];
    Device* device = (Device*)[centralBLEHelper.discoveredDeviceList objectAtIndex:_ownerIndex];
    [device resetTimerWithInterval:interval data:data];
}

#pragma mark - UpdateInfoDeviceDelegate
-(void) didUpdateRSSI:(int)rssi
{
    [self.rssi_label setText:[NSString stringWithFormat:@"%i", rssi]];
}

-(void) didUpdateValueForChar2:(NSData *)value
{
    unsigned char byteData[5];
    [value getBytes:&byteData length:5];
    
    //
    int byte0 = byteData[0];
    if (byte0 & 0x01) {
        [self.c2_bit0_switch setOn:YES];
    }
    else{
        [self.c2_bit0_switch setOn:NO];
    }
    if (byte0 & 0x02) {
        [self.c2_bit1_switch setOn:YES];
    }
    else{
        [self.c2_bit1_switch setOn:NO];
    }
    if (byte0 & 0x04) {
        [self.c2_bit2_switch setOn:YES];
    }
    else{
        [self.c2_bit2_switch setOn:NO];
    }
    if (byte0 & 0x08) {
        [self.c2_bit3_switch setOn:YES];
    }
    else{
        [self.c2_bit3_switch setOn:NO];
    }
    
    //ADC1
    int adc1_low = byteData[3];
    int adc1_high = byteData[4];
    int adc1 = adc1_high*256 + adc1_low;
    [self.adc1_label setText:[NSString stringWithFormat:@"%i", adc1]];
    [self.adc1_slider setValue:adc1/kMax_ADC_value];
    
    //ADC2
    int adc2_low = byteData[1];
    int adc2_high = byteData[2];
    int adc2 = adc2_high*256 + adc2_low;
    [self.adc2_label setText:[NSString stringWithFormat:@"%i", adc2]];
    [self.adc2_slider setValue:adc2/kMax_ADC_value];
}

@end
